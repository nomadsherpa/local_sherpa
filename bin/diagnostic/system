# Disable the history to avoid polluting the user's history file in Bash
[ -z "$ZSH_VERSION" ] && export HISTFILE=
SHERPA_ENABLED=true

source "$(dirname "$0")/common.sh"

# shellcheck disable=SC2155
readonly TMP_TEST_DIR=$(mktemp -d)
# shellcheck disable=SC2155
readonly STDERR_FILE=$(mktemp)

trap teardown EXIT
teardown() {
  rm -r "$TMP_TEST_DIR"
  rm "$STDERR_FILE"
}

check_minimum_supported_shell_version() {
  if [ -n "$ZSH_VERSION" ]; then
    :
  else
    check_minimum_supported_bash_version
  fi
}

check_minimum_supported_bash_version() {
  if ((BASH_VERSINFO[0] >= 5)); then
    print_success "[OK] Bash version"
  else
    print_error "[NOT OK] Bash version"
    echo "Sherpa requires Bash 4.3 or newer." >&2
    exit 1
  fi
}

check_enabled() {
  if [ "$SHERPA_WAS_ENABLED" = true ]; then
    print_success "[OK] Enabled"
  else
    print_error "[NOT OK] Enabled"
    echo "Sherpa is disabled! Enable it with 'sherpa on'." >&2
    exit 1
  fi
}

check_checksum_function_exists() {
  if type sha256sum > /dev/null 2>&1; then
    print_success "[OK] sha256sum utility"
  else
    print_error "[NOT OK] sha256sum utility"
    echo "Make sure the sha256sum utility is available in your system." >&2
    exit 1
  fi
}

check_cd_hook_setup() {
  if [ -n "$ZSH_VERSION" ]; then
    check_cd_hook_setup_zsh
  else
    check_cd_hook_setup_bash
  fi
}

check_cd_hook_setup_zsh() {
  if [[ "$chpwd_functions" == *"_sherpa_chpwd_handler"* ]]; then
    print_success "[OK] cd hook setup"
  else
    print_error "[NOT OK] cd hook setup"
    echo "Make sure that nothing tampers the chpwd_functions array after Sherpa is loaded." >&2
    echo "The _sherpa_chpwd_handler function should be in the chpwd_functions array." >&2
    exit 1
  fi
}

check_cd_hook_setup_bash() {
  if [[ "$PROMPT_COMMAND" == *"_sherpa_chpwd_handler"* ]]; then
    print_success "[OK] cd hook setup"
  else
    print_error "[NOT OK] cd hook setup"
    echo "Make sure that nothing tampers the PROMPT_COMMAND after Sherpa is loaded." >&2
    echo "That environment variable should contain the _sherpa_chpwd_handler function." >&2
    exit 1
  fi
}

setup_test_dir() {
  export SHERPA_CHECKSUM_DIR="$TMP_TEST_DIR/checksums"

  cd "$TMP_TEST_DIR"
  echo "alias test_alias_1=\"echo works\"" > "$SHERPA_ENV_FILENAME"
}

test_trusting_test_directory() {
  if sherpa trust > /dev/null 2> "$STDERR_FILE"; then
    print_success "[OK] Trusting env files"
  else
    print_error "[NOT OK] Trusting env files"
    cat "$STDERR_FILE" >&2
    rm "$STDERR_FILE"
    exit 1
  fi
}

test_loading_test_env() {
  if [ "$(test_alias_1 2> /dev/null)" = "works" ]; then
    print_success "[OK] Environment loading "
  else
    print_error "[NOT OK] Environment loading"
    exit 1
  fi
}

print_all_ok() {
  echo ""
  print_success "All systems are up and operational."
}

echo
echo "=========================== System =========================="

check_minimum_supported_shell_version
check_enabled
check_checksum_function_exists
check_cd_hook_setup

# =========== Check if it works in a test environment ===========
setup_test_dir

test_trusting_test_directory
test_loading_test_env

print_all_ok
