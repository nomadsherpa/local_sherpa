#!/usr/bin/env bash

# This script runs all the *_test.sh files recursively from the tests directory
# for the specified shell. It supports running a specific test file or all the
# test files.
#
# Usage:
#   ./tests/test_runner [bash|zsh] [test_file]
#
# Arguments:
#   bash|zsh  : The target shell to run the tests for.
#   test_file : (Optional) Specific test file to run. If not provided, all the
#               test files will be executed for the specified shell.
#
# Example Usage:
#   ./tests/test_runner bash
#   ./tests/test_runner zsh tests/example_test.sh
#
# Exit Codes:
#   0 : All tests passed successfully.
#   1 : Some tests failed or other error occurred.

set -e
shopt -s globstar

export TARGET_SHELL_NAME="$1"

# Don't empty the environment when running in a container
if [ -z "$RUNNING_IN_CONTAINER" ]; then
  _run_with_empty_env="env -i PATH=$PATH TARGET_SHELL_NAME=$TARGET_SHELL_NAME "
fi

case $TARGET_SHELL_NAME in
  bash)
    TARGET_SHELL_LABEL="Bash"

    # We run the tests in interactive mode to be able to test aliases
    SHELL_COMMAND="${_run_with_empty_env}bash --noprofile --norc -i "
    ;;
  zsh)
    TARGET_SHELL_LABEL="Zsh"

    SHELL_COMMAND="${_run_with_empty_env}zsh --no-globalrcs --no-rcs -i"
    ;;
  *)
    echo "Unknown shell: $TARGET_SHELL_NAME" >&2
    exit 1
    ;;
esac

echo "=============================== Shell: $TARGET_SHELL_LABEL =============================="
STDERR_FILE=$(mktemp)
TMP_STDERR_FILE=$(mktemp)
trap 'rm $STDERR_FILE ; rm $TMP_STDERR_FILE' EXIT

ALL_TESTS_PASSED=true

run_single_test() {
  local -r target_file="$1"
  local current_test_passed=true

  echo "== Running $target_file"
  echo "" > "$TMP_STDERR_FILE"

  $SHELL_COMMAND "$target_file" 2> "$TMP_STDERR_FILE" || current_test_passed=false
  $current_test_passed || ALL_TESTS_PASSED=false

  if $current_test_passed && [ -s "$TMP_STDERR_FILE" ]; then
    echo "== Error while running: $target_file" >> "$STDERR_FILE"
  fi

  cat "$TMP_STDERR_FILE" >> "$STDERR_FILE"

  echo ""
}

run_all_tests() {
  local -r target_dir="${1:-tests}"
  local -r test_files=("$target_dir"/**/*_test.sh)
  local file

  for file in "${test_files[@]}" ; do
    run_single_test "$file"
  done
}


target_file_or_dir=$2
if [ -n "$target_file_or_dir" ]; then
  if [ -f "$target_file_or_dir" ]; then
    run_single_test "$target_file_or_dir"
  else
    run_all_tests "${target_file_or_dir%/}"
  fi
else
  run_all_tests
fi

print_stderr() {
  while IFS= read -r line; do
    echo "  $line" >&2
  done < "$STDERR_FILE"
}

# Fail the test if there are errors, but all tests passed
# Can't set `set -e` everywhere because it would fail the test for soft errors
# like `grep` not finding a pattern
if [[ "$ALL_TESTS_PASSED" == true && -s "$STDERR_FILE" ]]; then
  echo -e "\033[31mAll tests passed, but some errors occurred!\033[0m"
  print_stderr
  exit 1
fi

# Fail the test if there are failed tests
if [[ "$ALL_TESTS_PASSED" != true ]]; then
  echo -e "\033[31mFailed examples:\033[0m"
  print_stderr
  exit 1
fi

echo -e "\033[32mAll tests passed successfully!\033[0m"
