#!/usr/bin/env bash

# This script runs all the *_test.sh files recursively from the tests directory
# for the specified shell. It supports running a specific test file or all the
# test files.
#
# Usage:
#   ./tests/test_runner [bash|zsh] [test_file]
#
# Arguments:
#   bash|zsh  : The target shell to run the tests for.
#   test_file : (Optional) Specific test file to run. If not provided, all the
#               test files will be executed for the specified shell.
#
# Example Usage:
#   ./tests/test_runner bash
#   ./tests/test_runner zsh tests/example_test.sh
#
# Exit Codes:
#   0 : All tests passed successfully.
#   1 : Some tests failed or other error occurred.

set -e
shopt -s globstar

export TARGET_SHELL_NAME="$1"

case $TARGET_SHELL_NAME in
  bash)
    TARGET_SHELL_NAME="Bash"
    # We run the tests in interactive mode to be able to test aliases
    SHELL_COMMAND="env -i PATH=$PATH TARGET_SHELL_NAME=$TARGET_SHELL_NAME bash --noprofile --norc -i"
    ;;
  zsh)
    TARGET_SHELL_NAME="Zsh"
    SHELL_COMMAND="env -i PATH=$PATH TARGET_SHELL_NAME=$TARGET_SHELL_NAME zsh --no-globalrcs --no-rcs -i"
    ;;
  *)
    echo "Unknown shell: $TARGET_SHELL_NAME"
    exit 1
    ;;
esac

echo "=============================== Shell: $TARGET_SHELL_NAME =============================="
STDERR_FILE=$(mktemp)
ALL_TESTS_PASSED=true

run_single_test() {

  echo "== Running $test_file"
  $SHELL_COMMAND "$test_file" 2>> "$STDERR_FILE" || ALL_TESTS_PASSED=false
  echo ""
}

run_all_tests() {
  local _test_files=(tests/**/*_test.sh)

  for file in "${_test_files[@]}" ; do
    echo "== Running $file"
    $SHELL_COMMAND "$file" 2>> "$STDERR_FILE" || ALL_TESTS_PASSED=false

    echo ""
  done
}


test_file=$2
if [ -n "$test_file" ]; then
  run_single_test
else
  run_all_tests
fi

print_stderr() {
  while IFS= read -r line; do
    echo "  $line" >&2
  done < "$STDERR_FILE"
}

# Fail the test if there are errors, but all tests passed
# Can't set `set -e` everywhere because it would fail the test for soft errors
# like `grep` not finding a pattern
if [[ "$ALL_TESTS_PASSED" == true && -s "$STDERR_FILE" ]]; then
  echo -e "\033[31mAll tests passed, but some errors occurred!\033[0m"
  print_stderr
  rm "$STDERR_FILE"

  exit 1
fi

# Fail the test if there are failed tests
if [[ "$ALL_TESTS_PASSED" != true ]]; then
  echo -e "\033[31mFailed examples:\033[0m"
  print_stderr
  rm "$STDERR_FILE"

  exit 1
fi

echo -e "\033[32mAll tests passed successfully!\033[0m"
